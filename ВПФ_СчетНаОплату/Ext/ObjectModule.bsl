Функция СведенияОВнешнейОбработке() экспорт
    ПараметрыРегистрации = Новый Структура;
    МассивНазначений = Новый Массив;
    МассивНазначений.Добавить("Документ.ЗаказКлиента"); 
    МассивНазначений.Добавить("Документ.СчетНаОплату"); 
   	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
    ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
    ПараметрыРегистрации.Вставить("Наименование", "ВПФ Счет на оплату(новый)");
    ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
    ПараметрыРегистрации.Вставить("Версия", "1.1"); 
    ПараметрыРегистрации.Вставить("Информация", "Внешняя печатная форма Счета на оплату"); 
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();                                                                       
	
    ДобавитьКоманду(ТаблицаКоманд, "ВПФ Счет на оплату", "ВПФ_СчетНаОплатуМакет",
	 "ВызовСерверногоМетода", Истина, "ПечатьMXL");    
	
    ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
    Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); //как будет выглядеть описание печ.формы
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); //ВызовСерверногоМетода
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление; 
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры 

Функция ШаблонТаблицыОписанияОбластейЛоготипа() Экспорт
	
	ТаблицаОписанияОбластей = Новый ТаблицаЗначений;
	ТаблицаОписанияОбластей.Колонки.Добавить("ОбластьМакета");
	ТаблицаОписанияОбластей.Колонки.Добавить("СодержитЛоготип", , Новый ОписаниеТипов("Булево"));
	ТаблицаОписанияОбластей.Колонки.Добавить("Устарела", , Новый ОписаниеТипов("Булево"));
	ТаблицаОписанияОбластей.Колонки.Добавить("Приоритет", , Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаОписанияОбластей;
	
КонецФункции


//#Область Печать

//#Область ИнтерфейсПечати

Функция УниверсальныйЗапросПоДаннымДокумента(МассивОбъектов, ИспользоватьФаксимиле)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьФаксимиле", ИспользоватьФаксимиле);
	
	Запрос.Текст = 
	"
	// :::Шапка
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплату.Ссылка КАК Ссылка
	|	,СчетНаОплату.Дата КАК ДатаДокумента
	|	,СчетНаОплату.Номер КАК Номер
	|	,СчетНаОплату.Организация КАК Организация
	|	,СчетНаОплату.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо
	|	,СчетНаОплату.Организация.Префикс КАК Префикс
	|	,СчетНаОплату.Организация.ФайлЛоготип КАК ФайлЛоготип
	|	,СчетНаОплату.Организация.ФайлФаксимильнаяПечать КАК ФаксимилеПечати
	|	,СчетНаОплату.Подразделение
	|	,Выбор КОГДА &ИспользоватьФаксимиле = ИСТИНА 
	|		ТОГДА Значение(Перечисление.ДаНет.Да)
	|		ИНАЧЕ Значение(Перечисление.ДаНет.Нет) КОНЕЦ КАК ИспользоватьФаксимиле
	|	,СчетНаОплату.ПодписьРуководителя.Должность КАК ДолжностьРуководителя
	|	,СчетНаОплату.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя
	|	,СчетНаОплату.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиВыполнилРаботыУслуги
	|	,СчетНаОплату.ПодписьРуководителя.Факсимиле КАК ФаксимилеРуководителя
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера
	|	,СчетНаОплату.ПодписьГлавногоБухгалтера.Факсимиле КАК ФаксимилеГлавногоБухгалтера
	|	,СчетНаОплату.БанковскийСчет КАК БанковскийСчет
	|	,СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	,СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента
	|	,СчетНаОплату.Контрагент КАК Контрагент
	|	,СчетНаОплату.Договор
	|	,СчетНаОплату.УсловияСчетаЗаказа КАК ДополнительныеУсловия
	|	,СчетНаОплату.УсловияСчетаЗаказа КАК ТекстДополнительныхУсловий
	|	,СчетНаОплату.ДокументОснование
	|	,СчетНаОплату.Ответственный
	|	,СчетНаОплату.Ответственный.Физлицо КАК ФизическоеЛицоОтветственного
	|	,СчетНаОплату.Автор
	|	,СчетНаОплату.ДисконтнаяКарта
	|	,СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте
	|	,СчетНаОплату.Комментарий КАК Комментарий
	|	,СчетНаОплату.ОснованиеПечати КАК ОснованиеПечати
	|	,СчетНаОплату.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка
	|	,ЛОЖЬ КАК ОжидаетсяВыборВариантаКП
	|	,СчетНаОплату.Вес
	|	,СчетНаОплату.Объем
	|	,СчетНаОплату.НоменклатураДоставки
	|	,ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплату.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ПредставлениеНоменклатурыДоставки
	|	,СчетНаОплату.НоменклатураДоставки.Артикул КАК АртикулДоставки
	|	,СчетНаОплату.НоменклатураДоставки.Код КАК КодДоставки
	|	,СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДоставки
	|	,СчетНаОплату.СтоимостьДоставки
	|	,СчетНаОплату.СтавкаНДСДоставки
	|	,СчетНаОплату.СуммаНДСДоставки
	|
	// :::Табличная часть "Запасы"
	|	,СчетНаОплату.Запасы.(
	|		НомерСтроки КАК НомерСтроки
	|		,Содержание
	|		,Выбор КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КОНЕЦ КАК ПредставлениеНоменклатуры
	|		,Номенклатура.Код КАК Код
	|		,Номенклатура.Артикул КАК Артикул
	|		,Номенклатура.Штрихкод КАК Штрихкод
	|		,ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|		,Характеристика
	|		,Цена КАК Цена
    |       ,ОД_Описание КАК Описание
	|		,Сумма КАК Сумма
	|		,СтавкаНДС КАК СтавкаНДС
	|		,СуммаНДС КАК СуммаНДС
	|		,Всего КАК Всего
	|		,Количество КАК Количество
	|		,Вес КАК Вес
	|		,Объем КАК Объем
	|		,ПроцентСкидкиНаценки
	|		,Выбор КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|			ТОГДА 1
	|			ИНАЧЕ 0 КОНЕЦ КАК ЕстьСкидка
	|		,СуммаАвтоматическойСкидки
	|		,Ложь КАК ЭтоРазделитель
	|		,Ложь КАК ЭтоНабор
	|		,Выбор КОГДА НоменклатураНабора <> Значение(Справочник.Номенклатура.ПустаяСсылка) 
	|			И НоменклатураНабора.ВариантПечатиНабора = Значение(Перечисление.ВариантыПечатиНаборов.НаборИКомплектующие)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НеобходимоВыделитьКакСоставНабора
	|		,НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|	) КАК ТаблицаЗапасы
	|
	// :::Табличная часть "Добавленные наборы"
	|	,СчетНаОплату.ДобавленныеНаборы.(
	|		НоменклатураНабора КАК НоменклатураНабора
	|		,ХарактеристикаНабора КАК ХарактеристикаНабора
	|		,Количество КАК Количество
	|		,ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА НоменклатураНабора.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(НоменклатураНабора.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНабора
	|		,НоменклатураНабора.ВариантПечатиНабора КАК ВариантПечатиНабора
	|		,НоменклатураНабора.ТипНоменклатуры КАК ТипНоменклатурыНабора
	|		,НоменклатураНабора.Артикул КАК АртикулНабора
	|		,НоменклатураНабора.Код КАК КодНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНабора
	|		,НоменклатураНабора.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияНабора
	|		,ИСТИНА КАК ВыводитьИтоги
	|	) КАК ТаблицаДобавленныеНаборы
	|
	// :::Табличная часть "Платежный календарь"
	|	,СчетНаОплату.ПлатежныйКалендарь.(
	|		ДатаОплаты
	|		,Постфикс
	|		,ПроцентОплаты
	|		,СуммаОплаты
	|		,СуммаНДСОплаты
	|	) КАК ТаблицаПланаОплат
	|
	|ИЗ Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ СчетНаОплату.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО Ссылка, НомерСтроки";
	
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	ДоставкаСервер.ДобавитьСтрокуДоставкиУниверсальныеДанные(ДанныеДокументов);
	
	// Наборы
	НаборыСервер.КомпоноватьТабличнуюЧастьПоНаборам(ДанныеДокументов, "ТаблицаЗапасы");
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ИдентификаторПечатнойФормы(ЧастичнаяОплата = Ложь, ИспользоватьФаксимиле = Ложь) Экспорт
	
	Возврат ?(ЧастичнаяОплата,"ВПФ_СчетНаОплатуМакет","ВПФ_СчетНаОплатуМакет") + ?(ИспользоватьФаксимиле, "Факсимиле", "");
	
КонецФункции

Функция ПредставлениеПФ(ЧастичнаяОплата = Ложь, ИспользоватьФаксимиле = Ложь) Экспорт
	
	КомпонентыПредставления = Новый Массив;
	КомпонентыПредставления.Добавить(НСтр("ru ='ВПФ Счет на оплату'"));
	
	КомпонентыДопПредставления = Новый Массив;
	Если ЧастичнаяОплата Тогда
		КомпонентыДопПредставления.Добавить(НСтр("ru ='частичная'"));
	КонецЕсли;
	
	Если ИспользоватьФаксимиле Тогда
		КомпонентыДопПредставления.Добавить(НСтр("ru ='факсимиле'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомпонентыДопПредставления) Тогда
		ДополнительноеПредставление = СтрШаблон("(%1)", СтрСоединить(КомпонентыДопПредставления, ", "));
		КомпонентыПредставления.Добавить(ДополнительноеПредставление);
	КонецЕсли;
	
	Возврат СтрСоединить(КомпонентыПредставления, " ");
	
КонецФункции

Функция МатрицаВозможныхВариантов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ЛОЖЬ ЧастичнаяОплата, ЛОЖЬ ИспользоватьФаксимиле
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ Ложь, ИСТИНА
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ Истина, ЛОЖЬ
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ Истина, ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция КлючПараметровПечати() Экспорт
	
	Возврат "ПАРАМЕТРЫ_ПЕЧАТИ_Универсальные_СчетНаОплату";
КонецФункции

Функция ПолныйПутьКМакету() Экспорт
	
	Возврат ПолучитьМакет("ВПФ_СчетНаОплатуМакет");
	
КонецФункции


//// Сформировать печатные формы объектов
////
//// ВХОДЯЩИЕ:
////   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
////   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
////   ПараметрыПечати - Структура - Структура дополнительных параметров печати
////
//// ИСХОДЯЩИЕ:
////   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
////   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
////

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//ВозможныеВарианты = МатрицаВозможныхВариантов();
	//Для каждого СтрокаТаблицы Из ВозможныеВарианты Цикл
		//ОписаниеПечатнойФормы = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,"ВПФ_СчетНаоплату");               
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ВПФ_СчетНаОплатуМакет","ВПФ Счет на оплату",
	СформироватьПФ(МассивОбъектов,ОбъектыПечати),,ПолучитьМакет("ВПФ_СчетНаОплатуМакет"),"Счет на оплату");
	//	Если ПечатнаяФорма <> Неопределено Тогда
	//		
	//		
	//		//СформироватьПФ(ДанныеОбъектовПечати, ОбъектыПечати);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если ЗначениеЗаполнено(ПараметрыПечатиШаблонПечатиОфисныхДокументов) Тогда
	//	
	//	Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
	//		Если СтрНачинаетсяС(ПечатнаяФорма.ИмяВРЕГ, ВРег("ПечатьПоШаблонуОфисногоДокумента")) Тогда
	//			ПечатнаяФорма.ОфисныеДокументы = ПечатьПоШаблонуОфисногоДокумента(МассивОбъектов, ШаблонПечатиОфисныхДокументов);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	ЭлектроннаяПочтаУНФ.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры
//#КонецОбласти

 //Учесть особенности частичной оплаты.
 //
 //Параметры:
 //	ДанныеОбъектовПечати - ТаблицаЗначений
Процедура УчестьОсобенностиЧастичнойОплаты(ДанныеОбъектовПечати) Экспорт

	КопияДанныеОбъектовПечати = ДанныеОбъектовПечати.Скопировать();

	ДанныеОбъектовПечати.Очистить();

	ДанныеОбъектовПечати.Колонки.Удалить("Номер");
	ДанныеОбъектовПечати.Колонки.Добавить("Номер", Новый ОписаниеТипов(Новый КвалификаторыСтроки(15)));

	Для Каждого ОбъектПечатиКопииДанных Из КопияДанныеОбъектовПечати Цикл

		Если ОбъектПечатиКопииДанных.ТаблицаПланаОплат.Количество() > 1 Тогда

			Для Каждого СтрокаПланаОплатыКопииДанных Из ОбъектПечатиКопииДанных.ТаблицаПланаОплат Цикл

				ОбъектПечатиОсновнойТаблицы = ДанныеОбъектовПечати.Добавить();
				ЗаполнитьЗначенияСвойств(ОбъектПечатиОсновнойТаблицы, ОбъектПечатиКопииДанных, , "ТаблицаПланаОплат");

				Если Не ПустаяСтрока(СтрокаПланаОплатыКопииДанных.Постфикс) Тогда

					ОбъектПечатиОсновнойТаблицы.Номер = ОбъектПечатиОсновнойТаблицы.Номер + "/"
						+ СтрокаПланаОплатыКопииДанных.Постфикс;

				КонецЕсли;

				ОбъектПечатиОсновнойТаблицы.ТаблицаПланаОплат = ОбъектПечатиКопииДанных.ТаблицаПланаОплат.СкопироватьКолонки();

				СтрокаПланаОплатыОсновнойТаблицы = ОбъектПечатиОсновнойТаблицы.ТаблицаПланаОплат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаОплатыОсновнойТаблицы, СтрокаПланаОплатыКопииДанных);

			КонецЦикла;

		Иначе

			ЗаполнитьЗначенияСвойств(ДанныеОбъектовПечати.Добавить(), ОбъектПечатиКопииДанных);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры



Функция СформироватьПФ(МассивОб, ОбъектыПечати) Экспорт
	Перем Ошибки, ПервыйДокумент, НомерСтрокиНачало;
	ОбъектыПечатиМассив = Новый Массив;
	ОбъектыПечатиМассив.Добавить(МассивОб);
	ОписаниеПечатнойФормы = Новый ТабличныйДокумент;
	ОписаниеПечатнойФормы.КлючПараметровПечати = КлючПараметровПечати();
	//ОписаниеПечатнойФормы.Макет = ПолучитьМакет("ВПФ_СчетНаОплатуМакет");
	//ОписаниеПечатнойФормы.С = "ВПФ Счет на оплату";	
	ИспользоватьФаксимиле = Ложь;
	ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(ОбъектыПечатиМассив,ИспользоватьФаксимиле);
	
	//ДанныеОбъектовПечати = УниверсальныйЗапросПоДаннымДокумента(ОбъектыПечати, ИспользоватьФаксимиле);
	ТабличныйДокумент = ОписаниеПечатнойФормы;
	ДанныеПечати = Новый Структура; 
	ЕстьТЧЗапасы = (ДанныеОбъектовПечати.Колонки.Найти("ТаблицаЗапасы") <> Неопределено);

	//ЕстьТЧЗапасы = Истина;
	ЕстьТЧРаботыУслуги = (ДанныеОбъектовПечати.Колонки.Найти("ТаблицаРаботыУслуги") <> Неопределено);
	ЕстьТЧРаботыУслуги = Ложь;

	//ЕстьТЧПланОплаты = (ДанныеОбъектовПечати.Колонки.Найти("ТаблицаПланаОплат") <> Неопределено);
	ВывестиПланОплаты = Ложь;
	ЕстьТЧПланОплаты = Ложь;

	ЕстьТекстДополнительныхУсловий = ДанныеОбъектовПечати.Колонки.Найти("ТекстДополнительныхУсловий") <> Неопределено;
	//ЕстьТекстДополнительныхУсловий = Истина;

	ПредставлениеСкидки = Константы.ПредставлениеСкидкиВПечатнойФорме.Получить();
	ШаблонСообщенийВариантов = НСтр(
		"ru='Печатная форма ""%1"" (%2) не может быть сформирована: не выбран основной вариант.'");
	
	//ОписаниеПечатнойФормы.Имя = Новый Соответствие;
	
	Для каждого ДанныеОбъекта Из ДанныеОбъектовПечати Цикл
		
		Если ТипЗнч(ДанныеОбъекта.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ДанныеОбъекта.ОжидаетсяВыборВариантаКП Тогда

			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщенийВариантов,
				"ВПФ Счет на оплату", ДанныеОбъекта.Ссылка), ДанныеОбъекта.Ссылка);
			Продолжить;

		КонецЕсли;
		
		ПечатьДокументовУНФ.ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
			ДанныеПечати);
		
		Макет = ПолучитьМакет("ВПФ_СчетНаОплатуМакет");
		ОбластиМакета = Новый Структура;
		ТаблицаОписанияОбластей= ШаблонТаблицыОписанияОбластейЛоготипа();
		
		Если Макет.Области.Найти("ОтступЗаголовка") <> Неопределено Тогда
			ОбластьОтступ = Макет.ПолучитьОбласть("ОтступЗаголовка");
			ТабличныйДокумент.Вывести(ОбластьОтступ);
		КонецЕсли;
		
		СведенияОбОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Организация,
			ДанныеОбъекта.ДатаДокумента, , ДанныеОбъекта.БанковскийСчет);
		СведенияОбКонтрагенте = ПечатьДокументовУНФ.СведенияОЮрФизЛице(ДанныеОбъекта.Контрагент,
			ДанныеОбъекта.ДатаДокумента, , );
		
		// :::Логотип, реквизиты
		
		// Если макет поддерживает QR код
		ДвоичныеДанныеQRКода = Неопределено;
		Если Макет.Области.Найти("QRКод") <> Неопределено Тогда 
				ОбластьQR      = Макет.ПолучитьОбласть("ЗаголовокСчета|QRКод");
				ОбластьРисунка = ОбластьQR.Области.Найти("РисунокQR");

			//ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Контрагент, "ВидКонтрагента");
			//
			//Если ЮрФизЛицо = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			//	ИЛИ ЮрФизЛицо = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			//	
			//	Если ПереводыСБПc2b.ПереводыСБПДоступны() Тогда
			//		НастройкиСБП = ПереводыСБПc2b.НастройкиПодключенияОперации(ДанныеОбъекта.Ссылка);
			//	Иначе
			//		НастройкиСБП = Новый Массив;
			//	КонецЕсли;
			//	
			//	Если НастройкиСБП.Количество() Тогда

			//		НастройкаСБП		  = НастройкиСБП[0];
			//		ИдентификаторОплаты   = ПереводыСБПc2b.ДинамическаяСсылка(ДанныеОбъекта.Ссылка, НастройкаСБП);
			//			
			//		ДанныеQRКодаСтруктура = ИнтеграцияСПлатежнымиСистемамиУНФ.СформироватьДанныеQRКода(
			//			НастройкаСБП,
			//			ИдентификаторОплаты.ПлатежнаяСсылка,
			//			,
			//			190);
			//			
			//		ДвоичныеДанныеQRКода  = ПолучитьИзВременногоХранилища(
			//			ДанныеQRКодаСтруктура.ДанныеQRКода);

			//	Иначе
			//		
			//		ДвоичныеДанныеQRКода  = QRКодРеквизитыПлатежа(
			//			ДанныеОбъекта, 
			//			СведенияОбОрганизации, 
			//			ЕстьТЧЗапасы, 
			//			ЕстьТЧРаботыУслуги, 
			//			ЕстьТЧПланОплаты, 
			//			ВывестиПланОплаты);
			//			
			//	КонецЕсли;
			//		
			//КонецЕсли;
			
			ЕстьQR = ЗначениеЗаполнено(ДвоичныеДанныеQRКода);
			ОбластьРеквизиты = Макет.Область("РеквизитыПраво");
			Если НЕ ЕстьQR Тогда
				ОбластьРеквизиты.ШиринаКолонки = ОбластьРеквизиты.ШиринаКолонки + Макет.Область("QRКод").ШиринаКолонки;
			КонецЕсли;
		Иначе
			ЕстьQR = Ложь;
		КонецЕсли;
		
		ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаглавиеСЛоготипом", Истина, Истина, 1);
		ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаглавиеБезЛоготипа", Ложь, Истина, 2);
		Если Макет.Области.Найти("QRКод") <> Неопределено Тогда
			ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаголовокСчетаСЛоготипом|Реквизиты", Истина, Ложь, 3);
			ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаголовокСчета|Реквизиты", Ложь, Ложь, 4);
		Иначе
			ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаголовокСчетаСЛоготипом", Истина, Ложь, 3);
			ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, "ЗаголовокСчета", Ложь, Ложь, 4);
			ТекстСообщения = НСтр(
			"ru = 'Изменился типовой макет печатной формы Счет на оплату. Для корректной
			|работы печатной формы необходимо обновить отредактированный ранее макет. 
			|Это можно выполнить самостоятельно в разделе ""Компания - Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		СтрокаСвойствОбластиМакета = ЗаполнитьОбластьЗаголовкаСчетовЗаказовИРазместитьЛоготип(ДанныеОбъекта,
			ТаблицаОписанияОбластей, Ошибки);
			
		Если СтрокаСвойствОбластиМакета <> Неопределено Тогда
			
			// Если макет поддерживает QR код
			Если Макет.Области.Найти("QRКод") <> Неопределено Тогда
				
				ОбластьQR      = Макет.ПолучитьОбласть("ЗаголовокСчета|QRКод");
				ОбластьРисунка = ОбластьQR.Области.Найти("РисунокQR");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда

				ДанныеПечати.Вставить("БанкПолучателяПредставление", СведенияОбОрганизации.Банк.Наименование + " "
					+ СведенияОбОрганизации.Банк.Город);

			КонецЕсли;

			ДанныеПечати.Вставить("ИНН", СведенияОбОрганизации.ИНН);
			ДанныеПечати.Вставить("КПП", СведенияОбОрганизации.КПП);

			ПредставлениеПоставщика = ?(ПустаяСтрока(СведенияОбОрганизации.ТекстКорреспондента),
				СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ТекстКорреспондента);
			ДанныеПечати.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			ДанныеПечати.Вставить("БИКБанкаПолучателя", СведенияОбОрганизации.БИК);
			ДанныеПечати.Вставить("СчетБанкаПолучателяПредставление", СведенияОбОрганизации.КоррСчет);
			ДанныеПечати.Вставить("СчетПолучателяПредставление", СведенияОбОрганизации.НомерСчета);

			СтрокаСвойствОбластиМакета.ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет,
				СтрокаСвойствОбластиМакета.ОбластьМакета, ДанныеОбъекта.Ссылка);
				
			НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.Вывести(СтрокаСвойствОбластиМакета.ОбластьМакета);
			
			Если ЕстьQR И ОбластьРисунка <> Неопределено Тогда
				ОбластьРисунка.Картинка = Новый Картинка(ДвоичныеДанныеQRКода);
				ТабличныйДокумент.Присоединить(ОбластьQR);
			КонецЕсли;
			
			ТабличныйДокумент.Область(НачалоНовогоФормата+1,,ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
			
		КонецЕсли;
		
		// :::Заголовок
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеОбъекта.ДатаДокумента,
			ДанныеОбъекта.Номер, ДанныеОбъекта.Префикс);
		Постфикс = ?(ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да, НСтр("ru ='(факсимиле)'"), "");

		ПредставлениеДокументаДляСохранения = СокрЛП(СтрШаблон(НСтр("ru ='Счет на оплату № %1 от %2 %3'"),
			НомерДокумента, Формат(ДанныеОбъекта.ДатаДокумента, "ДЛФ=DD"), Постфикс));
		ПредставлениеДокументаДляПечати = СокрЛП(СтрШаблон(НСтр("ru ='Счет на оплату № %1 от %2'"), НомерДокумента,
			Формат(ДанныеОбъекта.ДатаДокумента, "ДЛФ=DD")));
		//ОписаниеПечатнойФормы
		//ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы.Вставить(ДанныеОбъекта.Ссылка, ПредставлениеДокументаДляСохранения);

		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		Если ОбластьЗаголовок <> Неопределено Тогда

			ДанныеПечати.Вставить("ПредставлениеДокумента", ПредставлениеДокументаДляПечати);
			ОбластьЗаголовок.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		КонецЕсли;
		
		// :::Поставщик
		ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
		Если ОбластьПоставщик <> Неопределено Тогда
			
			ДанныеПечати.Вставить("ПредставлениеПоставщика", ПечатьДокументовУНФ.ОписаниеОрганизации(
				СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
			ОбластьПоставщик.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
			
		КонецЕсли;
		
		// :::Покупатель
		ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
		Если ОбластьПокупатель <> Неопределено Тогда
			
			ДанныеПечати.Вставить("ПредставлениеПолучателя", ПечатьДокументовУНФ.ОписаниеОрганизации(
				СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,"));
			ДанныеПечати.Вставить("ОснованиеПечати", ДанныеОбъекта.ОснованиеПечати);
			
			ОбластьПокупатель.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьПокупатель);
			
		КонецЕсли;
		
		// :::Шапка таблицы
		ОбластиМакета.Очистить();
		ОбластиМакета.Вставить("НомерСтраницы", Макет.ПолучитьОбласть("НомерСтраницы"));
		
		СкидкаПоЗапасам = 0;
		Если ЕстьТЧЗапасы <> Неопределено Тогда
			
			СкидкаПоЗапасам = ДанныеОбъекта.ТаблицаЗапасы.Итог("ЕстьСкидка");
			
		КонецЕсли;
		
		СкидкаПоРаботам = 0;
		Если ЕстьТЧРаботыУслуги <> Ложь Тогда
			
			СкидкаПоРаботам = ДанныеОбъекта.ТаблицаРаботыУслуги.Итог("ЕстьСкидка");
			
		КонецЕсли;
		
		ЕстьСкидки = ((СкидкаПоЗапасам + СкидкаПоРаботам) <> 0);
		
		ИмяОбласти = ?(ЕстьСкидки, "ШапкаТаблицыСоСкидкой", "ШапкаТаблицы");
		ОбластиМакета.Вставить("ОбластьМакетаЗаголовокТаблицы", Макет.ПолучитьОбласть(ИмяОбласти));
		Если ОбластиМакета.ОбластьМакетаЗаголовокТаблицы <> Неопределено Тогда
			
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаЗаголовокТаблицы);
			
		КонецЕсли;
		
		// :::Табличные части
		ОбластиМакета.Вставить("ОбластьМакетаИтогоПоСтранице", Макет.ПолучитьОбласть("ИтогоПоСтранице"));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоПоДокументу", Макет.ПолучитьОбласть("Итого"));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоНДС_ЧО",Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата"));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоСкидка", Макет.ПолучитьОбласть("ИтогоСкидка"));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоКОплате", Макет.ПолучитьОбласть("ИтогоКОплате"));
		ОбластиМакета.Вставить("ОбластьМакетаИтогоКОплатеСВесом", Макет.ПолучитьОбласть("ИтогоКОплатеСВесом"));
		ОбластиМакета.Вставить("ОбластьМакетаСуммаПрописью", Макет.ПолучитьОбласть("СуммаПрописью"));
		ОбластиМакета.Вставить("ОбластьМакетаУсловия",Макет.ПолучитьОбласть("ДополнительныеУсловия"));

		ШаблонИмени 					= "Подписи%1%2";
		ПредставлениеПредприниматель	= ?(ДанныеОбъекта.ОрганизацияЮридическоеФизическоеЛицо
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "Предпринимателя", "");
		ПредставлениеФаксимиле			= ?(ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да,
			"СФаксимиле", "БезФаксимиле");

		ИмяОбласти = СтрШаблон(ШаблонИмени, ПредставлениеПредприниматель, ПредставлениеФаксимиле);
		ОбластиМакета.Вставить("ОбластьМакетаПодпись", Макет.ПолучитьОбласть(ИмяОбласти));

		ИмяОбласти = ?(ЕстьСкидки, "СтрокаСоСкидкой", "Строка");
		ОбластиМакета.Вставить("ОбластьМакетаСтрока", Макет.ПолучитьОбласть(ИмяОбласти));

		ИмяОбласти = ?(ЕстьСкидки, "СтрокаСоСкидкойГруппировка", "СтрокаГруппировка");
		ОбластиМакета.Вставить("ОбластьМакетаРазделитель",Макет.ПолучитьОбласть(ИмяОбласти));

		ОбластиМакета.Вставить("ОбластьМакетаОтветственныйЗаОформлениеДокумента",Макет.ПолучитьОбласть("Ответственный"));
		
		Итоги = Новый Структура;
		Итоги.Вставить("НомерСтраницы", 1);
		Итоги.Вставить("Сумма", 0);
		Итоги.Вставить("СуммаНаСтранице", 0);
		Итоги.Вставить("СуммаНДС", 0);
		Итоги.Вставить("Всего", 0);
		Итоги.Вставить("Количество", 0);
		Итоги.Вставить("КоличествоНаСтранице", 0);
		Итоги.Вставить("НомерСтроки", 0);
		Итоги.Вставить("Вес", 0);
		Итоги.Вставить("СкидкаПоСтроке", 0);
		Итоги.Вставить("СкидкаПоДокументу", 0);
		Итоги.Вставить("ОбработаноСтрок", 0);
		Итоги.Вставить("КоличествоСтрок", 0);
		Итоги.Вставить("ЕстьСкидки", ЕстьСкидки);
		Итоги.Вставить("ЕстьСтавкаНольПроцентов", Ложь);
		Итоги.Вставить("ВывестиСекциюЧастичнаяОплата", (ВывестиПланОплаты И ЕстьТЧПланОплаты));
		Итоги.Вставить("ПредставлениеСкидки", ПредставлениеСкидки);
		Итоги.Вставить("КоличествоСтрокВОписанииУсловий", 0);
		Итоги.Вставить("ПредставлениеДокумента", ПредставлениеДокументаДляПечати);
		
		Итоги.КоличествоСтрок = КоличествоСтрокКВыводуНаПечать(ДанныеОбъекта, ЕстьТЧРаботыУслуги, ЕстьТЧЗапасы);
		
		ТекстДополнительныхУсловий = "";
		Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительныеУсловия) Тогда
			
			Если ЕстьТекстДополнительныхУсловий И ЗначениеЗаполнено(ДанныеОбъекта.ТекстДополнительныхУсловий) Тогда
				ТекстДополнительныхУсловий = ДанныеОбъекта.ТекстДополнительныхУсловий;
			Иначе				
				ТекстДополнительныхУсловий = ДанныеОбъекта.ДополнительныеУсловия.ТекстУсловий;
			КонецЕсли;
			Итоги.КоличествоСтрокВОписанииУсловий = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			
		КонецЕсли;
		
		Если ОбластиМакета.ОбластьМакетаСтрока <> Неопределено Тогда
			
			ПараметрыНоменклатуры = Новый Структура;
			
			Если ЕстьТЧРаботыУслуги <> Ложь Тогда
				
				Для каждого СтрокаРаботыУслуги Из ДанныеОбъекта.ТаблицаРаботыУслуги Цикл
					
					Итоги.ОбработаноСтрок = Итоги.ОбработаноСтрок + 1;
					
					Если СтрокаРаботыУслуги.ЭтоРазделитель
						И ОбластиМакета.ОбластьМакетаРазделитель = Неопределено Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если Итоги.НомерСтроки <> 0 И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент,
						ОбластиМакета, Итоги) = Ложь Тогда

						ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, Итоги);

					КонецЕсли;
					
					ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаРаботыУслуги, ДанныеПечати,
						ПараметрыНоменклатуры, Итоги);
					
					ОбластьМакетаСтроки = ?(СтрокаРаботыУслуги.ЭтоРазделитель, ОбластиМакета.ОбластьМакетаРазделитель,
						ОбластиМакета.ОбластьМакетаСтрока);
					ОбластьМакетаСтроки.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтроки);
					
					НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакетаСтроки,
						СтрокаРаботыУслуги);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЕстьТЧЗапасы Тогда

				Для Каждого СтрокаЗапасы Из ДанныеОбъекта.ТаблицаЗапасы Цикл

					Итоги.ОбработаноСтрок = Итоги.ОбработаноСтрок + 1;

					Если СтрокаЗапасы.ЭтоРазделитель И ОбластиМакета.ОбластьМакетаРазделитель = Неопределено Тогда

						Продолжить;

					КонецЕсли;

					Если Итоги.НомерСтроки <> 0 И СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент,
						ОбластиМакета, Итоги) = Ложь Тогда

						ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, Итоги);

					КонецЕсли;

					ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаЗапасы, ДанныеПечати, ПараметрыНоменклатуры,
						Итоги);

					ОбластьМакетаСтроки = ?(СтрокаЗапасы.ЭтоРазделитель, ОбластиМакета.ОбластьМакетаРазделитель,
						ОбластиМакета.ОбластьМакетаСтрока);
					ОбластьМакетаСтроки.Параметры.Заполнить(ДанныеПечати);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтроки);

					НаборыСервер.УчестьОформлениеСтрокиНабора(ТабличныйДокумент, ОбластьМакетаСтроки, СтрокаЗапасы);

				КонецЦикла;

			КонецЕсли;
			
		КонецЕсли;
		
		// :::Итоги по посл. странице
		Если ОбластиМакета.ОбластьМакетаИтогоПоСтранице <> Неопределено Тогда
			
			ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Итоги);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
			
		КонецЕсли;
		
		// :::Итоги по документу
		Если ОбластиМакета.ОбластьМакетаИтогоПоДокументу <> Неопределено Тогда

			ДанныеПечати.Вставить("Всего", ПечатьДокументовУНФ.ФорматСумм(Итоги.Сумма));
			ДанныеПечати.Вставить("ЗаголовокНДС", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(
				Итоги.СуммаНДС, ДанныеОбъекта.СуммаВключаетНДС, Ложь,
				Итоги.ЕстьСтавкаНольПроцентов));
			ДанныеПечати.Вставить("ВсегоНДС", ?(Итоги.СуммаНДС = 0
				И Не Итоги.ЕстьСтавкаНольПроцентов, "-", ПечатьДокументовУНФ.ФорматСумм(
				Итоги.СуммаНДС, , "0,00")));

			ОбластиМакета.ОбластьМакетаИтогоПоДокументу.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоДокументу);

		КонецЕсли;
		
		// :::Частичная оплата
		Если Итоги.ВывестиСекциюЧастичнаяОплата Тогда

			Если ОбластиМакета.ОбластьМакетаИтогоНДС_ЧО <> Неопределено Тогда

				ДанныеПечати.Вставить("НДСкОплате", ПечатьДокументовУНФ.ПредставлениеЗаголовкаНДС(
					Итоги.СуммаНДС, ДанныеОбъекта.СуммаВключаетНДС, Истина));

				Если ДанныеОбъекта.ТаблицаПланаОплат.Итог("ПроцентОплаты") > 0 Тогда

					ДанныеПечати.Вставить("ПроцентОплаты", ДанныеОбъекта.ТаблицаПланаОплат.Итог("ПроцентОплаты"));
					ДанныеПечати.Вставить("ВсегоКОплате", ПечатьДокументовУНФ.ФорматСумм(
						ДанныеОбъекта.ТаблицаПланаОплат.Итог("СуммаОплаты")));
					ДанныеПечати.Вставить("ВсегоНДСкОплате", ПечатьДокументовУНФ.ФорматСумм(
						ДанныеОбъекта.ТаблицаПланаОплат.Итог("СуммаНДСОплаты")));

				Иначе

					СтрокаПрочерк = НСтр("ru ='-'");
					ДанныеПечати.Вставить("ВсегоКОплате", СтрокаПрочерк);
					ДанныеПечати.Вставить("ПроцентОплаты", СтрокаПрочерк);
					ДанныеПечати.Вставить("ВсегоНДСкОплате", СтрокаПрочерк);

				КонецЕсли;

				ОбластиМакета.ОбластьМакетаИтогоНДС_ЧО.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоНДС_ЧО);

			КонецЕсли;

		КонецЕсли;
		
		// ::: Итоговая скидка по документу
		Если Итоги.ЕстьСкидки Тогда
			
			Если ОбластиМакета.ОбластьМакетаИтогоСкидка <> Неопределено Тогда
				
				ОбластиМакета.ОбластьМакетаИтогоСкидка.Параметры.Заполнить(Итоги);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоСкидка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ::: Всего к оплате
		Если Итоги.ЕстьСкидки Тогда
			ЗаголовокВсегоКОплате = НСтр("ru = 'Всего к оплате (с учетом скидки):'");
		Иначе
			ЗаголовокВсегоКОплате = НСтр("ru = 'Всего к оплате:'");
		КонецЕсли;
		ДанныеПечати.Вставить("ЗаголовокВсегоКОплате", ЗаголовокВсегоКОплате);
		ДанныеПечати.Вставить("ИтогоКОплате", ПечатьДокументовУНФ.ФорматСумм(Итоги.Всего));

		ВесПоДокументу = ?(ДанныеОбъектовПечати.Колонки.Найти("Вес") <> Неопределено, ДанныеОбъекта.Вес, 0);
		ДанныеПечати.Вставить("ИтогоВес", ?(Итоги.Вес <> 0, Итоги.Вес, ВесПоДокументу));

		ОбластьМакетаИтогоКОплате = ?(ДанныеПечати.ИтогоВес <> 0, ОбластиМакета.ОбластьМакетаИтогоКОплатеСВесом,
			ОбластиМакета.ОбластьМакетаИтогоКОплате);
		Если ОбластьМакетаИтогоКОплате <> Неопределено Тогда

			ОбластьМакетаИтогоКОплате.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоКОплате);

		КонецЕсли;
		
		// ::: Сумма прописью
		Если ОбластиМакета.ОбластьМакетаСуммаПрописью <> Неопределено Тогда

			ИтоговаяСтрока = НСтр("ru = 'Всего наименований %1, на сумму %2'");
			ФорматированнаяСумма = ПечатьДокументовУНФ.ФорматСумм(Итоги.Всего,
				ДанныеОбъекта.ВалютаДокумента);

			ДанныеПечати.Вставить("ИтоговаяСтрока", СтрШаблон(ИтоговаяСтрока, Итоги.Количество,
				ФорматированнаяСумма));
			ДанныеПечати.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(Итоги.Всего,
				ДанныеОбъекта.ВалютаДокумента));

			ОбластиМакета.ОбластьМакетаСуммаПрописью.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаСуммаПрописью);

		КонецЕсли;
		
		// :::Дополнительные условия
		Если Не ПустаяСтрока(ТекстДополнительныхУсловий) И ОбластиМакета.ОбластьМакетаУсловия <> Неопределено Тогда

			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаУсловия);

			Для СчетчикСтрок = 1 По Итоги.КоличествоСтрокВОписанииУсловий Цикл

				ДанныеПечати.Вставить("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий,
					СчетчикСтрок));

				ОбластиМакета.ОбластьМакетаУсловия.Параметры.Заполнить(ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаУсловия);

			КонецЦикла;

		КонецЕсли;
		
		// :::Подписи
		Если ОбластиМакета.ОбластьМакетаПодпись <> Неопределено Тогда

			ОбластиМакета.ОбластьМакетаПодпись.Параметры.Заполнить(ДанныеОбъекта);

			Если ДанныеОбъекта.ИспользоватьФаксимиле = Перечисления.ДаНет.Да Тогда

				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя картинки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ПодписьРуководителя", "ФаксимилеРуководителя");
				ПодписиИФаксимиле.Вставить("ПодписьПредпринимателя", "ФаксимилеРуководителя");
				ПодписиИФаксимиле.Вставить("ПодписьГлавногоБухгалтера", "ФаксимилеГлавногоБухгалтера");
				ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФаксимилеПечати");
				ПодписиИФаксимиле.Вставить("ПечатьПредпринимателя", "ФаксимилеПечати");

				ПодписьДокументовУНФ.ЗаполнитьФаксимилеВОбластиМакета(ОбластиМакета.ОбластьМакетаПодпись,
					ДанныеОбъекта, ПодписиИФаксимиле, Ошибки);

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаПодпись);

		Иначе

			ТекстСообщения = НСтр(
			"ru = 'Изменился типовой макет печатной формы Счет на оплату. Для корректной
			|работы печатной формы необходимо обновить отредактированный ранее макет. 
			|Это можно выполнить самостоятельно в разделе ""Компания - Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		КонецЕсли;
		
		// :::Ответственный
		Если ОбластиМакета.ОбластьМакетаОтветственныйЗаОформлениеДокумента <> Неопределено Тогда

			ТелефонОтветственного = "";
			ЭлектроннаяПочтаОтветственного = "";
			Если ЗначениеЗаполнено(ДанныеОбъекта.ФизическоеЛицоОтветственного) Тогда

				ТелефонОтветственного = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
					ДанныеОбъекта.ФизическоеЛицоОтветственного, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
				ЭлектроннаяПочтаОтветственного = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
					ДанныеОбъекта.ФизическоеЛицоОтветственного, Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица);

			КонецЕсли;

			ОтветственныйЗаОформлениеДокумента = Строка(ДанныеОбъекта.Ответственный) + ?(ПустаяСтрока(
				ТелефонОтветственного), "", НСтр("ru =', тел.:'")) + ТелефонОтветственного + ?(ПустаяСтрока(
				ЭлектроннаяПочтаОтветственного), "", НСтр("ru =', e-mail:'")) + ЭлектроннаяПочтаОтветственного;
			ДанныеПечати.Вставить("ОтветственныйЗаОформлениеДокумента", ОтветственныйЗаОформлениеДокумента);

			ОбластиМакета.ОбластьМакетаОтветственныйЗаОформлениеДокумента.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаОтветственныйЗаОформлениеДокумента);

		Иначе

			ТекстСообщения = НСтр(
			"ru = 'Изменился типовой макет печатной формы Счет на оплату. Для корректной
			|работы печатной формы необходимо обновить отредактированный ранее макет. 
			|Это можно выполнить самостоятельно в разделе ""Компания - Администрирование - Печатные формы,
			|отчеты, обработки - Макеты печатных форм"" или обратиться к специалисту обслуживающей организации.'");

			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		КонецЕсли;

		ТекущаяОбластьПечати = Неопределено;
		Если ВывестиПланОплаты <> Ложь Тогда

			ОписаниеОбъектаПечати = ОбъектыПечати.НайтиПоЗначению(ДанныеОбъекта.Ссылка);
			Если ОписаниеОбъектаПечати <> Неопределено Тогда

				ТекущаяОбластьПечати = ТабличныйДокумент.Области.Найти(ОписаниеОбъектаПечати.Представление);

			КонецЕсли;

		КонецЕсли;

		Если ТекущаяОбластьПечати = Неопределено Тогда

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеОбъекта.Ссылка);

		Иначе

			ПрисоединитьКОбластиПечатиДокумента(ТабличныйДокумент, ТекущаяОбластьПечати, ОписаниеОбъектаПечати);

		КонецЕсли;

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОписаниеОбластиЛоготипа(ТаблицаОписанияОбластей, Макет, ИмяОбласти, СодержитЛоготип, Устаревшая,
	Приоритет)

	СтрокаТаблицы = ТаблицаОписанияОбластей.Добавить();

	ОбластьМакета = Неопределено;
	ОбластиНайдены = Истина;
	
	ОбластиДляПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбласти, "|");
	Для каждого ИмяОбластиДляПоиска Из ОбластиДляПоиска Цикл
		Если Макет.Области.Найти(ИмяОбластиДляПоиска) = Неопределено Тогда
			ОбластиНайдены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбластиНайдены Тогда

		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);

	КонецЕсли;

	СтрокаТаблицы.ОбластьМакета = ОбластьМакета;
	СтрокаТаблицы.СодержитЛоготип = СодержитЛоготип;
	СтрокаТаблицы.Устарела = Устаревшая;
	СтрокаТаблицы.Приоритет = Приоритет;

КонецПроцедуры

Процедура ДобавитьНовуюСтраницуДокумента(ТабличныйДокумент, ОбластиМакета, Итоги)
	
	Если ОбластиМакета.ОбластьМакетаИтогоПоСтранице <> Неопределено Тогда
		
		ОбластиМакета.ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(Итоги);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
		
	КонецЕсли;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Итоги.КоличествоНаСтранице= 0;
	Итоги.СуммаНаСтранице = 0;
	Итоги.НомерСтраницы = Итоги.НомерСтраницы + 1;
	
	Если ОбластиМакета.НомерСтраницы <> Неопределено Тогда
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("ПредставлениеДокумента", Итоги.ПредставлениеДокумента);
		ДанныеПечати.Вставить("ПредставлениеСтраницы", СтрШаблон(НСтр("ru ='Страница %1'"), Итоги.НомерСтраницы));
		
		ОбластиМакета.НомерСтраницы.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластиМакета.НомерСтраницы);
		
	КонецЕсли;
	
	Если ОбластиМакета.ОбластьМакетаЗаголовокТаблицы <> Неопределено Тогда
		
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьМакетаЗаголовокТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаКорректноРазмещаетсяНаСтранице(ТабличныйДокумент, ОбластиМакета, Итоги)
	
	ЕстьВсеОбласти = Истина;
	Для каждого ЭлементСтруктуры Из ОбластиМакета Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда
			
			ЕстьВсеОбласти = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьВсеОбласти Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	МассивОбластейМакета = Новый Массив;
	
	МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаСтрока);
	МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоПоСтранице);
	
	Если Итоги.ОбработаноСтрок = Итоги.КоличествоСтрок - 1 Тогда
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоПоДокументу);
		
		Если Итоги.ВывестиСекциюЧастичнаяОплата Тогда
			
			МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоНДС_ЧО);
			
		КонецЕсли;
		
		Если Итоги.ЕстьСкидки Тогда
			
			МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоСкидка);
			
		КонецЕсли;
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаИтогоКОплатеСВесом);
		
		Если Итоги.КоличествоСтрокВОписанииУсловий > 0 Тогда
			
			Для Итератор = 0 По Итоги.КоличествоСтрокВОписанииУсловий Цикл
				
				МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаУсловия);
				
			КонецЦикла;
			
		КонецЕсли;
		
		МассивОбластейМакета.Добавить(ОбластиМакета.ОбластьМакетаПодпись);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент.ПроверитьВывод(МассивОбластейМакета)
	
КонецФункции

Функция ЗаполнитьОбластьЗаголовкаСчетовЗаказовИРазместитьЛоготип(ДанныеОбъекта, ОбластиМакета, Ошибки)
	
	ПользовательПравилМакет = Ложь;
	ЛоготипЗаполнен = ЗначениеЗаполнено(ДанныеОбъекта.ФайлЛоготип);
	Приоритет = 999;
	
	МассивОбластей = ОбластиМакета.НайтиСтроки(Новый Структура("СодержитЛоготип", ЛоготипЗаполнен));
	Для каждого ОписаниеОбласти Из МассивОбластей Цикл
		
		Если ОписаниеОбласти.ОбластьМакета <> Неопределено Тогда
			
			Если Приоритет > ОписаниеОбласти.Приоритет Тогда
				
				Приоритет = ОписаниеОбласти.Приоритет;
				
			КонецЕсли;
			
			Если ОписаниеОбласти.Устарела Тогда
				
				ПользовательПравилМакет = Истина;
				
			КонецЕсли;
			
			ОписаниеОбласти.ОбластьМакета.Параметры.Заполнить(ДанныеОбъекта);
			
			Если ЛоготипЗаполнен Тогда
				
				ДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеОбъекта.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					КартинкаЛоготипа = Новый Картинка(ДанныеКартинки);
					ПечатьДокументовУНФ.УстановитьКартинкуБезопасно(ОписаниеОбласти.ОбластьМакета.Рисунки,"Логотип", КартинкаЛоготипа);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПользовательПравилМакет Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ,
			ПечатьДокументовУНФ.ШаблонТекстаПредупрежденияПравкиМакета(), Неопределено);
		
	КонецЕсли;
	
	Если Приоритет = 999 Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ОбластиМакета.Найти(Приоритет, "Приоритет");
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатиПоСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ДанныеПечати, ПараметрыНоменклатуры, Итоги)

	ДанныеПечати.Очистить();

	Если Не СтрокаТабличнойЧасти.ЭтоРазделитель И Не СтрокаТабличнойЧасти.ЭтоНабор Тогда
		Итоги.Количество = Итоги.Количество + 1;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.ЭтоРазделитель Тогда
		НомерСтроки = 0;
		Итоги.НомерСтроки = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ЭтоНабор Тогда
		НомерСтроки = 0;
	Иначе
		Итоги.НомерСтроки = Итоги.НомерСтроки + 1;
		НомерСтроки = Итоги.НомерСтроки;
	КонецЕсли;
	ДанныеПечати.Вставить("НомерСтроки", НомерСтроки);

	ПараметрыНоменклатуры.Очистить();
	ПараметрыНоменклатуры.Вставить("Содержание", СтрокаТабличнойЧасти.Содержание);
	//ОписаниеНоменклатуры 
	ПараметрыНоменклатуры.Вставить("ПредставлениеНоменклатуры", СтрокаТабличнойЧасти.Описание); 
	//ОписаниеНоменклатуры
	ПараметрыНоменклатуры.Вставить("ПредставлениеХарактеристики", СтрокаТабличнойЧасти.Характеристика);
	ПараметрыНоменклатуры.Вставить("ПредставлениеАртикула", СтрокаТабличнойЧасти.Артикул);
	ПараметрыНоменклатуры.Вставить("НеобходимоВыделитьКакСоставНабора",
		СтрокаТабличнойЧасти.НеобходимоВыделитьКакСоставНабора);

	ДанныеПечати.Вставить("ПредставлениеНоменклатуры", ПечатьДокументовУНФ.ПредставлениеНоменклатуры(
		ПараметрыНоменклатуры));
	ДанныеПечати.Вставить("ПредставлениеКодаНоменклатуры", ПечатьДокументовУНФ.ПредставлениеКодаНоменклатуры(
		СтрокаТабличнойЧасти));
	ДанныеПечати.Вставить("Артикул", СтрокаТабличнойЧасти.Артикул);
	ДанныеПечати.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
	
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения")
		Или ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения.Наименование);
	Иначе
		ДанныеПечати.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	КонецЕсли;
	
	ДанныеПечати.Вставить("Цена", СтрокаТабличнойЧасти.Цена);

	Если Итоги.ЕстьСкидки Тогда

		ДанныеПечати.Вставить("ПредставлениеСкидки", ПечатьДокументовУНФ.ПредставлениеСкидки(СтрокаТабличнойЧасти,
			Итоги));

	КонецЕсли;

	ДанныеПечати.Вставить("Сумма", СтрокаТабличнойЧасти.Сумма);

	Если Итоги.ЕстьСтавкаНольПроцентов = Ложь // Нет смысла проверять каждую строку, если уже нашли...

		И СтрокаТабличнойЧасти.Владелец().Колонки.Найти("СтавкаНДС") <> Неопределено И СтрокаТабличнойЧасти.СтавкаНДС
		= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль() Тогда

		Итоги.ЕстьСтавкаНольПроцентов = Истина;

	КонецЕсли;

	Если Не СтрокаТабличнойЧасти.ЭтоРазделитель И Не СтрокаТабличнойЧасти.ЭтоНабор Тогда

		Итоги.КоличествоНаСтранице= Итоги.КоличествоНаСтранице + СтрокаТабличнойЧасти.Количество;
		Итоги.Сумма				= Итоги.Сумма + СтрокаТабличнойЧасти.Сумма;
		Итоги.СуммаНаСтранице		= Итоги.СуммаНаСтранице + СтрокаТабличнойЧасти.Сумма;
		Итоги.СуммаНДС			= Итоги.СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
		Итоги.Всего				= Итоги.Всего + СтрокаТабличнойЧасти.Всего;
		Итоги.СкидкаПоДокументу	= Итоги.СкидкаПоДокументу + Итоги.СкидкаПоСтроке;
		
	КонецЕсли;

КонецПроцедуры


Процедура ПрисоединитьКОбластиПечатиДокумента(ТабличныйДокумент, ТекущаяОбластьПечати, ОписаниеОбъектаПечати)

	НомерСтрокиНачалаОбласти = ТекущаяОбластьПечати.Верх;
	НомерСтрокиОкончанияОбласти = ТабличныйДокумент.ВысотаТаблицы;

	ТабличныйДокумент.Область(ТекущаяОбластьПечати.Верх, , ТекущаяОбластьПечати.Низ).Имя = "";
	ТабличныйДокумент.Область(НомерСтрокиНачалаОбласти, ,
		НомерСтрокиОкончанияОбласти).Имя = ОписаниеОбъектаПечати.Представление;

КонецПроцедуры

Функция КоличествоСтрокКВыводуНаПечать(ДанныеОбъекта, ЕстьТЧРаботыУслуги, ЕстьТЧЗапасы)
	
	КоличествоРезультирующихСтрок = 0;
	
	Если ЕстьТЧРаботыУслуги <> Ложь Тогда
		
		КоличествоРезультирующихСтрок = КоличествоРезультирующихСтрок + ДанныеОбъекта.ТаблицаРаботыУслуги.Количество();
		
	КонецЕсли;
	
	Если ЕстьТЧЗапасы Тогда
		
		КоличествоРезультирующихСтрок = КоличествоРезультирующихСтрок + ДанныеОбъекта.ТаблицаЗапасы.Количество();
		
	КонецЕсли;
	
	Возврат КоличествоРезультирующихСтрок;
	
КонецФункции

Функция QRКодРеквизитыПлатежа(ДанныеОбъекта, СведенияОбОрганизации, ЕстьТЧЗапасы, ЕстьТЧРаботыУслуги, ЕстьТЧПланОплаты, ВывестиПланОплаты)
	
	РеквизитыПлатежа = НовыйРеквизитыПлатежаУФЭБС();
	
	РеквизитыПлатежа.ТекстПолучателя             = СведенияОбОрганизации.ПолноеНаименование;
	РеквизитыПлатежа.НомерСчетаПолучателя        = СведенияОбОрганизации.НомерСчета;
	РеквизитыПлатежа.НаименованиеБанкаПолучателя = Строка(СведенияОбОрганизации.Банк);
	РеквизитыПлатежа.БИКБанкаПолучателя          = СведенияОбОрганизации.БИК;
	РеквизитыПлатежа.СчетБанкаПолучателя         = СведенияОбОрганизации.КоррСчет;
	
	РеквизитыПлатежа.ИННПолучателя               = СведенияОбОрганизации.ИНН;
	РеквизитыПлатежа.КПППолучателя               = СведенияОбОрганизации.КПП;
	
	СуммаКОплате = 0;
	СуммаНДС = 0;
	
	Если ВывестиПланОплаты <> Неопределено И ЕстьТЧПланОплаты <> Неопределено Тогда
		СуммаКОплате = ДанныеОбъекта.ТаблицаПланаОплат.Итог("СуммаОплаты");
		СуммаНДС = ДанныеОбъекта.ТаблицаПланаОплат.Итог("СуммаНДСОплаты");
	Иначе
		Если ЕстьТЧЗапасы Тогда
			Для каждого СтрокаТабличнойЧасти Из ДанныеОбъекта.ТаблицаЗапасы Цикл
				Если Не СтрокаТабличнойЧасти.ЭтоРазделитель И Не СтрокаТабличнойЧасти.ЭтоНабор Тогда
					СуммаКОплате = СуммаКОплате + СтрокаТабличнойЧасти.Всего;
					СуммаНДС 	 = СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьТЧРаботыУслуги <> Неопределено Тогда
			Для каждого СтрокаТабличнойЧасти Из ДанныеОбъекта.ТаблицаРаботыУслуги Цикл
				Если Не СтрокаТабличнойЧасти.ЭтоРазделитель И Не СтрокаТабличнойЧасти.ЭтоНабор Тогда
					СуммаКОплате = СуммаКОплате + СтрокаТабличнойЧасти.Всего;
					СуммаНДС 	 = СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыПлатежа.СуммаЧислом = СуммаКОплате;
	
	Если СуммаНДС > 0 Тогда
		ТекстПроНДС = НСтр("ru = 'В том числе НДС %1'");
		ТекстПроНДС = СтрШаблон(ТекстПроНДС, Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	Иначе
		ТекстПроНДС = НСтр("ru = 'Без налога (НДС)'");
	КонецЕсли;
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеОбъекта.ДатаДокумента,
			ДанныеОбъекта.Номер, ДанныеОбъекта.Префикс);
			
	РеквизитыПлатежа.НазначениеПлатежа = СтрШаблон(НСтр("ru = 'Оплата по счету № %1 от %2. Сумма %3. %4.'"), 
		НомерДокумента, 
		Формат(ДанныеОбъекта.ДатаДокумента, "ДФ=dd.MM.yyyy"), 
		Формат(СуммаКОплате, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="), 
		ТекстПроНДС);
	
	// QR-код
	QRСтрока = УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
	Если ПустаяСтрока(QRСтрока) Тогда
		Возврат Неопределено; // Возникли ошибки
	КонецЕсли;
	
	ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(QRСтрока, 0, 190);
	Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		Шаблон = НСтр("ru = 'Не удалось сформировать QR-код для документа %1.
			|Технические подробности см. в журнале регистрации.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеОбъекта.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеQRКода;
	
КонецФункции

Функция НовыйРеквизитыПлатежаУФЭБС()
	
	// Входящие данные функции УправлениеПечатьюРФ.ФорматнаяСтрокаУФЭБС()
	
	Возврат Новый Структура(
		// Обязательные поля структуры
		"ТекстПолучателя,
		|НомерСчетаПолучателя,
		|НаименованиеБанкаПолучателя,
		|БИКБанкаПолучателя,
		|СчетБанкаПолучателя,
		|ИндексПлатежногоДокумента,
		// Дополнительные поля структуры
		|СуммаЧислом,
		|НазначениеПлатежа,
		|ИННПолучателя,
		|ИННПлательщика,
		|СтатусСоставителя,
		|КПППолучателя,
		|КодБК,
		|КодОКТМО,
		|ПоказательОснования,
		|ПоказательПериода,
		|ПоказательНомера,
		|ПоказательДаты,
		|ПоказательТипа,
		// Прочие дополнительные поля
		|ФамилияПлательщика,
		|ИмяПлательщика,
		|ОтчествоПлательщика,
		|АдресПлательщика,
		|ИдентификаторНачисления,
		|Ссылка");
	
КонецФункции

#КонецОбласти


